Monday, June 13th 2011
--------------------------------
Cityfusion project description
--------------------------------

A website which allows anonymous users to post events, which are then
displayed for other users to see.

Features
 - Anonymous users (like kijiji) can edit from a hash link in email

Initial objectives:
 - Build an app which features an 'event' model
 - Design a form which allows an event to be created in the database

----------------------------------
Event design
----------------------------------

Events can be based on pre-existing event models, such as those
featured on facebook. Facebook has fields for:
When?
 - Start
   - date
   - time (half hour increments
 - End (optional, same as start)
What are you planning?
 - Text field description
Where?
 - Text field description
 - Enter street address (Optional)
   - Street address
   - City/Town field
More info?
 - Charfield(length undetermined)
Who's invited
 - Select guests app
 - "Anyone can view and RSVP (public event)" Boolean
   - "Guests can invite Friends" Boolean
 - "Show the guest list on the event page" Boolean

Previous implementation of this project
-------------------------------------------------------------
event_date
event_time
title
venue
description
owner

feature: a tagging feature should be present.

django app that can handle this:

django-taggit
  - This is the most up to date tagging application available

---------------------------------------------------------------
Apps to install for this project
---------------------------------------------------------------
django - using 1.3
django-taggit - for tagging functionality
django-registration - for user registration
south - for database migration



Tuesday, June 14th 2011
---------------------------------------
Objectives today are:
A. Create a user
B. Create an event
C. Display an event

A.
 django registration uses the following workflow:

   1. User signs up by supplying username, email address and password.

   2. 'User' object is created.
        'is_active' field set to 'False'
      An activation key is generated and stored
      An email is sent to user with a link to activate the account.

   3. New account is made when user clicks link.
        'is_active' field set to 'True'.
      User can log in.

 Additionally, we would like to create anonymous users like so:

   1. User provides an email address

   2. 'User' object is created
         'is_active set to 'False'
	 'username' is random 30 character alphanumeric string
	 

Aside on user - event relations
-------------------------------------------- 

The following is a recount of a fictional verbal conversation between
myself (employee 1) and Tony (co-founder), based on a true story.

Me: How do we make anonymous users if username and password are
    required by django auth?
Tony: -_-
Me: ...?
Tony: Make a unique ID for Events and hand that out, with an
      optional field for an associated user.
Me: But what if more than one user wants to update the event?
Tony: There can only be one (user).
Me: But what if-
Tony: Get back to work, peon. And stop reading reddit.
Me: Yes sir!
---------------------------------------------

  Okay so we now know that anonymous users don't exist.
  Django-registration will therefore be the best way to handle
  users. And by pulling the user as a requirement for the Event model,
  users become an afterthought to the system. They can now be
  implemented last.

New ordering of importance:
 A. Create Event
 B. View events
 C. Make users (maybe)

A. Creating Events
  A template can be made for a form which can populate an event.

 - The form will be filled by the user


Friday, June 17th 2011
---------------------------------------
B. View events
 - small list description
 - large detail description

Also, some event websites such as ticketmaster, allow you to specify
more than one day for an event.

As well as the event, the venue is an object with additional
information and properties such as:
  - Parking information
  - Public transportation info
  - Box office numbers for tickets
  - Box office Hours
  - types of payments for tickets
  - capacity
  - wheelchair access or not
  - general rules regarding the event
  - age rules, such as children under a certain age
  - miscellaneous section for:
    - seating layout information
    - binoculars
    - whatever extra is left out
  - its own description page with:
   - address
   - website
   - google map widget


Events can be accessed from the url
event/view/<event name> ...
this might have some overlap.
Some sites seem to have a random number before the event name
event/view/<number>/<event name>

We might implement that later.

Monday, June 20th 2011
---------------------------------------
How to implement the event name url (slug) generator:

take the title of the event,
 - strip out all non letter characters
 - insert '-' characters in place of whitespace
 - slug is now generated!

error checking:
 - verify that it is unique, and add a number if it isn't, or maybe
   ask the user to rename their project

Good news everyone! Django has built in slugification with the
slugify() command. It is featured in django.template.defaultfilters.

Also, I have moved logic which relates two fields in the model into
the model itself by extending the save() function. This allows the key
to be generated by code in the model, as well as the slug to be
related to the name directly in the model.

The user will still need to be set in the view, however, because it is
dependant upon whether the user is logged in or not.


Wednesday, June 22nd 2011
---------------------------------------
Create event:
       
       A flow chart I drew up indicates that,
       upon creation user is redirected to:
       	    if the user is logged in:
	       a list of events they can edit named 'user_event_list'
	    the website home page
	
       Regardless of their login status, an email is sent to them.

       This email option could be added to a list of user options.

Possible feature:

	  - User profile allowing for emails to be toggled
	  - along with user info such as name, email etc.

Todo list:
 # edit event
 + email users with link
 - event tagging


Edit event:

     Similar to the create event view, the user will be prompted with
     a form and allowed to update and resubmit the fields they wish to
     change.

     Possible features:
     
     A) Ajax could be used here to dynamically select elements of the
     model for editing, allowing the user a WYSIWYG interface for
     editing the event details.

     B) Facebook integration could allow updates to be pushed into the
     facebook event page for the linked event.

Thursday, June 23rd 2011
---------------------------------------

Todo list:
 + edit event
 - event tagging
 # javascript on the DateTime fields still is not working
 + add the user registration templates

Friday, June 24th 2011
---------------------------------------
Todo list:
 + event tagging
 # javascript still not working on create event!
 + user editing of events
 + user list of their events
 - filter events by tag


Filtering events by tag: 
  
  The event browser shall have a list of tags, which users can select
  with a mouse by clicking on.

  The user can select more than one.

  As the tags are selected they become active on the page.

  Active tags have their CSS style attribute class changed.

  If a tag is selected and clicked, then it becomes deselected.

  The output of the browser is dependent upon the tags active.

  There is a debate upon whether the 'all' tag should have special
  features, in that turning another filter on will turn it off, etc.

Tuesday, June 28th 2011
---------------------------------------
 + filter events by tag
 - filter events by date

Filter events by tag

   Implemented on monday, bug tested today.  Tags are separated by
   commas in the url. The Tag model in taggit contains a unique slug
   field, so this is used by the browse view in Event.views.browse to
   identify the tag.

   Toggling of the tags is achieved by a utility class in
   Event.utils.TagInfo which contains the three pieces of information
   used by the template to display the tag.

   A list of these TagInfo objects are passed to the template for
   rendering, along with a list of the filtered Events.

Filter events by date

   The url shall be appended with:
    a date
    a page number (if applicable)

 Notes on date:
  - the date will be either relative or absolute
    Relative:
     - today
     - tomorrow
     - this weekend
     - this week
     - next week
    Absolute:
     - an ISO standard date YYYY-MM-DD

 Notes on page number:
  - the page numbers start at 1
  - a lack of page number means page 1
  - page 0 is page 1
  - 'next' and 'previous' buttons will cycle through
    pages relative to the date being viewed.

 Plan of implementation:

 - absolute dates
 + today, no pages
 + today, with pages
 + tomorrow, with pages
 + this weekend, with pages
 + this week, with pages
 + next week, with pages


Tuesday, July 5th 2011
---------------------------------------
Brainstorm on things wrong with the site:

  - dates should always be displayed in relation to the current time
    - for example, events happening today, should have 'Today, 5:00pm'
      or something like that, instead of 'July 5, 2011, 5:03pm'
    - dates further ahead in time, out of current context, should be
      displayed using their date, so that the user can better
      understand when they are occuring
    
