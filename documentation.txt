Monday, June 13th 2011
--------------------------------
Cityfusion project description
--------------------------------

A website which allows anonymous users to post events, which are then
displayed for other users to see.

Features
 - Anonymous users (like kijiji) can edit from a hash link in email

Initial objectives:
 - Build an app which features an 'event' model
 - Design a form which allows an event to be created in the database

----------------------------------
Event design
----------------------------------

Events can be based on pre-existing event models, such as those
featured on facebook. Facebook has fields for:
When?
 - Start
   - date
   - time (half hour increments
 - End (optional, same as start)
What are you planning?
 - Text field description
Where?
 - Text field description
 - Enter street address (Optional)
   - Street address
   - City/Town field
More info?
 - Charfield(length undetermined)
Who's invited
 - Select guests app
 - "Anyone can view and RSVP (public event)" Boolean
   - "Guests can invite Friends" Boolean
 - "Show the guest list on the event page" Boolean

Previous implementation of this project
-------------------------------------------------------------
event_date
event_time
title
venue
description
owner

feature: a tagging feature should be present.

django app that can handle this:

django-taggit
  - This is the most up to date tagging application available

---------------------------------------------------------------
Apps to install for this project
---------------------------------------------------------------
django - using 1.3
django-taggit - for tagging functionality
django-registration - for user registration
south - for database migration



Tuesday, June 14th 2011
---------------------------------------
Objectives today are:
A. Create a user
B. Create an event
C. Display an event

A.
 django registration uses the following workflow:

   1. User signs up by supplying username, email address and password.

   2. 'User' object is created.
        'is_active' field set to 'False'
      An activation key is generated and stored
      An email is sent to user with a link to activate the account.

   3. New account is made when user clicks link.
        'is_active' field set to 'True'.
      User can log in.

 Additionally, we would like to create anonymous users like so:

   1. User provides an email address

   2. 'User' object is created
         'is_active set to 'False'
	 'username' is random 30 character alphanumeric string
	 

Aside on user - event relations
-------------------------------------------- 

The following is a recount of a fictional verbal conversation between
myself (employee 1) and Tony (co-founder), based on a true story.

Me: How do we make anonymous users if username and password are
    required by django auth?
Tony: -_-
Me: ...?
Tony: Make a unique ID for Events and hand that out, with an
      optional field for an associated user.
Me: But what if more than one user wants to update the event?
Tony: There can only be one (user).
Me: But what if-
Tony: Get back to work, peon. And stop reading reddit.
Me: Yes sir!
---------------------------------------------

  Okay so we now know that anonymous users don't exist.
  Django-registration will therefore be the best way to handle
  users. And by pulling the user as a requirement for the Event model,
  users become an afterthought to the system. They can now be
  implemented last.

New ordering of importance:
 A. Create Event
 B. View events
 C. Make users (maybe)

A. Creating Events
  A template can be made for a form which can populate an event.

 - The form will be filled by the user

 
